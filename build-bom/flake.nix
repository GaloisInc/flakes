# Generated by rustflake from the Cargo.toml and Cargo.lock
{
  inputs = {
      nixpkgs = {
          url = "github:nixos/nixpkgs/nixos-unstable";
        };
      levers = {
          url = "github:kquick/nix-levers";
          inputs.nixpkgs.follows = "nixpkgs";
        };
      aho-corasick-src = {
          url = "https://crates.io/api/v1/crates/aho-corasick/0.7.18/download";
          flake = false;
        };
      anstream-src = {
          url = "https://crates.io/api/v1/crates/anstream/0.6.12/download";
          flake = false;
        };
      anstyle-parse-src = {
          url = "https://crates.io/api/v1/crates/anstyle-parse/0.2.3/download";
          flake = false;
        };
      anstyle-query-src = {
          url = "https://crates.io/api/v1/crates/anstyle-query/1.0.2/download";
          flake = false;
        };
      anstyle-src = {
          url = "https://crates.io/api/v1/crates/anstyle/1.0.6/download";
          flake = false;
        };
      anstyle-wincon-src = {
          url = "https://crates.io/api/v1/crates/anstyle-wincon/3.0.2/download";
          flake = false;
        };
      anyhow-src = {
          url = "https://crates.io/api/v1/crates/anyhow/1.0.43/download";
          flake = false;
        };
      autocfg-src = {
          url = "https://crates.io/api/v1/crates/autocfg/1.0.1/download";
          flake = false;
        };
      bitflags-src = {
          url = "https://crates.io/api/v1/crates/bitflags/1.2.1/download";
          flake = false;
        };
      block-buffer-src = {
          url = "https://crates.io/api/v1/crates/block-buffer/0.9.0/download";
          flake = false;
        };
      byteorder-src = {
          url = "https://crates.io/api/v1/crates/byteorder/1.4.3/download";
          flake = false;
        };
      cc-src = {
          url = "https://crates.io/api/v1/crates/cc/1.0.69/download";
          flake = false;
        };
      cfg-if-0_1_10-src = {
          url = "https://crates.io/api/v1/crates/cfg-if/0.1.10/download";
          flake = false;
        };
      cfg-if-1_0_0-src = {
          url = "https://crates.io/api/v1/crates/cfg-if/1.0.0/download";
          flake = false;
        };
      chainsop-src = {
          url = "github:kquick/chainsop/81750f5";
          flake = false;
        };
      clap-src = {
          url = "https://crates.io/api/v1/crates/clap/4.5.2/download";
          flake = false;
        };
      clap_builder-src = {
          url = "https://crates.io/api/v1/crates/clap_builder/4.5.2/download";
          flake = false;
        };
      clap_derive-src = {
          url = "https://crates.io/api/v1/crates/clap_derive/4.5.0/download";
          flake = false;
        };
      clap_lex-src = {
          url = "https://crates.io/api/v1/crates/clap_lex/0.7.0/download";
          flake = false;
        };
      cloudabi-src = {
          url = "https://crates.io/api/v1/crates/cloudabi/0.0.3/download";
          flake = false;
        };
      colorchoice-src = {
          url = "https://crates.io/api/v1/crates/colorchoice/1.0.0/download";
          flake = false;
        };
      cpufeatures-src = {
          url = "https://crates.io/api/v1/crates/cpufeatures/0.1.5/download";
          flake = false;
        };
      digest-src = {
          url = "https://crates.io/api/v1/crates/digest/0.9.0/download";
          flake = false;
        };
      either-src = {
          url = "https://crates.io/api/v1/crates/either/1.6.1/download";
          flake = false;
        };
      env_filter-src = {
          url = "https://crates.io/api/v1/crates/env_filter/0.1.0/download";
          flake = false;
        };
      env_logger-src = {
          url = "https://crates.io/api/v1/crates/env_logger/0.11.2/download";
          flake = false;
        };
      filesprep_derive-src = {
          url = "github:kquick/chainsop/81750f5";
          flake = false;
        };
      filetime-src = {
          url = "https://crates.io/api/v1/crates/filetime/0.2.15/download";
          flake = false;
        };
      fs_extra-src = {
          url = "https://crates.io/api/v1/crates/fs_extra/1.2.0/download";
          flake = false;
        };
      generic-array-src = {
          url = "https://crates.io/api/v1/crates/generic-array/0.14.4/download";
          flake = false;
        };
      getrandom-src = {
          url = "https://crates.io/api/v1/crates/getrandom/0.2.3/download";
          flake = false;
        };
      glob-src = {
          url = "https://crates.io/api/v1/crates/glob/0.3.0/download";
          flake = false;
        };
      heck-src = {
          url = "https://crates.io/api/v1/crates/heck/0.4.1/download";
          flake = false;
        };
      hex-src = {
          url = "https://crates.io/api/v1/crates/hex/0.4.3/download";
          flake = false;
        };
      humantime-src = {
          url = "https://crates.io/api/v1/crates/humantime/2.1.0/download";
          flake = false;
        };
      itoa-src = {
          url = "https://crates.io/api/v1/crates/itoa/0.4.7/download";
          flake = false;
        };
      lazy_static-src = {
          url = "https://crates.io/api/v1/crates/lazy_static/1.4.0/download";
          flake = false;
        };
      libc-src = {
          url = "https://crates.io/api/v1/crates/libc/0.2.99/download";
          flake = false;
        };
      lock_api-src = {
          url = "https://crates.io/api/v1/crates/lock_api/0.3.4/download";
          flake = false;
        };
      log-src = {
          url = "https://crates.io/api/v1/crates/log/0.4.20/download";
          flake = false;
        };
      memchr-src = {
          url = "https://crates.io/api/v1/crates/memchr/2.4.0/download";
          flake = false;
        };
      memoffset-src = {
          url = "https://crates.io/api/v1/crates/memoffset/0.6.4/download";
          flake = false;
        };
      nix-src = {
          url = "https://crates.io/api/v1/crates/nix/0.22.1/download";
          flake = false;
        };
      num-traits-src = {
          url = "https://crates.io/api/v1/crates/num-traits/0.2.14/download";
          flake = false;
        };
      opaque-debug-src = {
          url = "https://crates.io/api/v1/crates/opaque-debug/0.3.0/download";
          flake = false;
        };
      os_pipe-src = {
          url = "https://crates.io/api/v1/crates/os_pipe/0.9.2/download";
          flake = false;
        };
      parking_lot-src = {
          url = "https://crates.io/api/v1/crates/parking_lot/0.10.2/download";
          flake = false;
        };
      parking_lot_core-src = {
          url = "https://crates.io/api/v1/crates/parking_lot_core/0.7.3/download";
          flake = false;
        };
      pete-src = {
          url = "https://crates.io/api/v1/crates/pete/0.7.0/download";
          flake = false;
        };
      ppv-lite86-src = {
          url = "https://crates.io/api/v1/crates/ppv-lite86/0.2.10/download";
          flake = false;
        };
      proc-macro2-src = {
          url = "https://crates.io/api/v1/crates/proc-macro2/1.0.78/download";
          flake = false;
        };
      quote-src = {
          url = "https://crates.io/api/v1/crates/quote/1.0.35/download";
          flake = false;
        };
      rand-src = {
          url = "https://crates.io/api/v1/crates/rand/0.8.4/download";
          flake = false;
        };
      rand_chacha-src = {
          url = "https://crates.io/api/v1/crates/rand_chacha/0.3.1/download";
          flake = false;
        };
      rand_core-src = {
          url = "https://crates.io/api/v1/crates/rand_core/0.6.3/download";
          flake = false;
        };
      rand_hc-src = {
          url = "https://crates.io/api/v1/crates/rand_hc/0.3.1/download";
          flake = false;
        };
      redox_syscall-0_1_57-src = {
          url = "https://crates.io/api/v1/crates/redox_syscall/0.1.57/download";
          flake = false;
        };
      redox_syscall-0_2_10-src = {
          url = "https://crates.io/api/v1/crates/redox_syscall/0.2.10/download";
          flake = false;
        };
      regex-src = {
          url = "https://crates.io/api/v1/crates/regex/1.5.4/download";
          flake = false;
        };
      regex-syntax-src = {
          url = "https://crates.io/api/v1/crates/regex-syntax/0.6.25/download";
          flake = false;
        };
      remove_dir_all-src = {
          url = "https://crates.io/api/v1/crates/remove_dir_all/0.5.3/download";
          flake = false;
        };
      rmp-serde-src = {
          url = "https://crates.io/api/v1/crates/rmp-serde/0.14.4/download";
          flake = false;
        };
      rmp-src = {
          url = "https://crates.io/api/v1/crates/rmp/0.8.10/download";
          flake = false;
        };
      ryu-src = {
          url = "https://crates.io/api/v1/crates/ryu/1.0.5/download";
          flake = false;
        };
      scopeguard-src = {
          url = "https://crates.io/api/v1/crates/scopeguard/1.2.0/download";
          flake = false;
        };
      serde-src = {
          url = "https://crates.io/api/v1/crates/serde/1.0.197/download";
          flake = false;
        };
      serde_derive-src = {
          url = "https://crates.io/api/v1/crates/serde_derive/1.0.197/download";
          flake = false;
        };
      serde_json-src = {
          url = "https://crates.io/api/v1/crates/serde_json/1.0.66/download";
          flake = false;
        };
      serial_test-src = {
          url = "https://crates.io/api/v1/crates/serial_test/0.4.0/download";
          flake = false;
        };
      serial_test_derive-src = {
          url = "https://crates.io/api/v1/crates/serial_test_derive/0.4.0/download";
          flake = false;
        };
      sha2-src = {
          url = "https://crates.io/api/v1/crates/sha2/0.9.5/download";
          flake = false;
        };
      slab_tree-src = {
          url = "https://crates.io/api/v1/crates/slab_tree/0.3.2/download";
          flake = false;
        };
      smallvec-src = {
          url = "https://crates.io/api/v1/crates/smallvec/1.13.1/download";
          flake = false;
        };
      snowflake-src = {
          url = "https://crates.io/api/v1/crates/snowflake/1.3.0/download";
          flake = false;
        };
      strsim-src = {
          url = "https://crates.io/api/v1/crates/strsim/0.11.0/download";
          flake = false;
        };
      syn-1_0_74-src = {
          url = "https://crates.io/api/v1/crates/syn/1.0.74/download";
          flake = false;
        };
      syn-2_0_52-src = {
          url = "https://crates.io/api/v1/crates/syn/2.0.52/download";
          flake = false;
        };
      tar-src = {
          url = "https://crates.io/api/v1/crates/tar/0.4.37/download";
          flake = false;
        };
      tempfile-src = {
          url = "https://crates.io/api/v1/crates/tempfile/3.2.0/download";
          flake = false;
        };
      test-log-macros-src = {
          url = "https://crates.io/api/v1/crates/test-log-macros/0.2.15/download";
          flake = false;
        };
      test-log-src = {
          url = "https://crates.io/api/v1/crates/test-log/0.2.15/download";
          flake = false;
        };
      thiserror-impl-src = {
          url = "https://crates.io/api/v1/crates/thiserror-impl/1.0.39/download";
          flake = false;
        };
      thiserror-src = {
          url = "https://crates.io/api/v1/crates/thiserror/1.0.39/download";
          flake = false;
        };
      typenum-src = {
          url = "https://crates.io/api/v1/crates/typenum/1.13.0/download";
          flake = false;
        };
      unicode-ident-src = {
          url = "https://crates.io/api/v1/crates/unicode-ident/1.0.12/download";
          flake = false;
        };
      unicode-xid-src = {
          url = "https://crates.io/api/v1/crates/unicode-xid/0.2.2/download";
          flake = false;
        };
      utf8parse-src = {
          url = "https://crates.io/api/v1/crates/utf8parse/0.2.1/download";
          flake = false;
        };
      version_check-src = {
          url = "https://crates.io/api/v1/crates/version_check/0.9.3/download";
          flake = false;
        };
      wasi-src = {
          url = "https://crates.io/api/v1/crates/wasi/0.10.2+wasi-snapshot-preview1/download";
          flake = false;
        };
      which-src = {
          url = "https://crates.io/api/v1/crates/which/4.2.2/download";
          flake = false;
        };
      winapi-i686-pc-windows-gnu-src = {
          url = "https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download";
          flake = false;
        };
      winapi-src = {
          url = "https://crates.io/api/v1/crates/winapi/0.3.9/download";
          flake = false;
        };
      winapi-x86_64-pc-windows-gnu-src = {
          url = "https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download";
          flake = false;
        };
      windows-sys-src = {
          url = "https://crates.io/api/v1/crates/windows-sys/0.52.0/download";
          flake = false;
        };
      windows-targets-src = {
          url = "https://crates.io/api/v1/crates/windows-targets/0.52.3/download";
          flake = false;
        };
      windows_aarch64_gnullvm-src = {
          url = "https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.52.3/download";
          flake = false;
        };
      windows_aarch64_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_aarch64_msvc/0.52.3/download";
          flake = false;
        };
      windows_i686_gnu-src = {
          url = "https://crates.io/api/v1/crates/windows_i686_gnu/0.52.3/download";
          flake = false;
        };
      windows_i686_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_i686_msvc/0.52.3/download";
          flake = false;
        };
      windows_x86_64_gnu-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_gnu/0.52.3/download";
          flake = false;
        };
      windows_x86_64_gnullvm-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.52.3/download";
          flake = false;
        };
      windows_x86_64_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_msvc/0.52.3/download";
          flake = false;
        };
      xattr-src = {
          url = "https://crates.io/api/v1/crates/xattr/0.2.2/download";
          flake = false;
        };
      xshell-macros-src = {
          url = "https://crates.io/api/v1/crates/xshell-macros/0.1.14/download";
          flake = false;
        };
      xshell-src = {
          url = "https://crates.io/api/v1/crates/xshell/0.1.14/download";
          flake = false;
        };
    };
  outputs = inps @ { self, nixpkgs, levers, ... }:
    {
        packages = levers.eachSystem (system:
              let pkgs = import nixpkgs { inherit system; };
                  rustBld = pname: src: version: packagename: deps:
                      pkgs.stdenv.mkDerivation {
                        pname = pname;
                        src = src;
                        version = version;
                        nativeBuildInputs = [ pkgs.rustc ];
                        unpackPhase = ''
                              runHook preUnpack
                              if [ -d $src ] ; then
                                cp -r $src/* .
                              else
                                tar zxf $src
                                cd ${packagename}-${version}
                              fi
                              chmod -R u+w .
                              rm -f Cargo.lock
                              runHook postUnpack
                          '';
                        configurePhase = ''
                              runHook preConfigure
                              mkdir -p .cargo
                              echo '[source.crates-io]' >> .cargo/config.toml
                              echo 'replace-with = "vendored-sources"' >> .cargo/config.toml
                              echo '[source.vendored-sources]' >> .cargo/config.toml
                              echo 'directory = "deps-srcs"' >> .cargo/config.toml
                              mkdir -p deps-srcs
                          '' + builtins.concatStringsSep "\n" (builtins.map (s: let ss = self.packages."${system}"."${s}-unpacked"; in ''ln -s ${ss} deps-srcs/${s}; sed -ie '/${s}/s,git[ ]*=[ ]*"[^"]*",path="deps-srcs/${s}",' Cargo.toml'') deps) + ''
                              

                              runHook postConfigure
                          '';
                        buildPhase = ''
                              runHook preBuild
                              ${pkgs.cargo}/bin/cargo build --offline
                              ${pkgs.cargo}/bin/cargo doc --offline
                              echo 'Documentation for <a href="${pname}/index.html">${pname} is here</a>' > target/doc/index.html
                              runHook postBuild
                          '';
                        installPhase = ''
                              runHook preInstall
                              mkdir -p $out/bin
                              for X in X $(${pkgs.findutils}/bin/find target -maxdepth 2 -executable -type f); do
                                if [ "X$X" != "XX" ]; then
                                  cp $X $out/bin/$(basename $X)
                                fi
                              done
                              mkdir $doc
                              cp -r target/doc/* $doc/
                              runHook postInstall
                          '';
                        outputs = [
                            "out"
                            "doc"
                          ];
                      };
                  rustUnpack = pname: src: version: pkgname:
                      pkgs.stdenv.mkDerivation {
                        pname = "${pname}-unpacked";
                        src = src;
                        version = version;
                        dontPatchShebangs = true;
                        unpackPhase = ''
                              runHook preUnpack
                              if [ -d $src ] ; then
                                cp -r $src/* .
                              else
                                tar zxf $src
                                cd ${pkgname}-${version}
                              fi
                              rm -f Cargo.lock
                              chmod -R u+w .
                              runHook postUnpack
                          '';
                        buildPhase = "";
                        installPhase = ''
                              runHook preInstall
                              mkdir -p $out
                              cp -r ./* $out
                              rm -f $out/Cargo.lock
                              ${pkgs.coreutils-full}/bin/sha256sum $(${pkgs.findutils}/bin/find $out -type f) | ${pkgs.gnused}/bin/sed -e "s@$out/@@" > cksums
                              if [ -d $src ] ; then
                                ${pkgs.coreutils-full}/bin/sha256sum <(cd $src; tar zcf - .) | ${pkgs.gnused}/bin/sed -e "s@  .*@  package@" >> cksums
                              else
                                ${pkgs.coreutils-full}/bin/sha256sum $src | ${pkgs.gnused}/bin/sed -e "s@$src@package@" >> cksums
                              fi
                              echo -e "import json
                              with open('cksums','r') as f: d = { l.split()[1]:l.split()[0] for l in f }
                              j={'package':d['package']}
                              del d['package']
                              j['files']=d
                              print(json.dumps(j))" | ${pkgs.python3}/bin/python3 > $out/.cargo-checksum.json
                              runHook postInstall
                          '';
                        configurePhase = "";
                      };
                  source_only = path: type:
                      let is_vcs = type == "directory" && builtins.elem final [ ".git" ".github" "_darcs" ];
                          is_output = type == "directory" && final == "target";
                          is_bkp = type == "regular" && (builtins.substring (builtins.stringLength final - 1) 1 final) == "~";
                          final = builtins.baseNameOf path;
                      in  ! is_vcs && ! is_output && ! is_bkp;
              in  {
                    default = self.packages.${system}.build-bom;
                    aho-corasick-unpacked = rustUnpack "aho-corasick" inps.aho-corasick-src "0.7.18" "aho-corasick";
                    anstream-unpacked = rustUnpack "anstream" inps.anstream-src "0.6.12" "anstream";
                    anstyle-unpacked = rustUnpack "anstyle" inps.anstyle-src "1.0.6" "anstyle";
                    anstyle-parse-unpacked = rustUnpack "anstyle-parse" inps.anstyle-parse-src "0.2.3" "anstyle-parse";
                    anstyle-query-unpacked = rustUnpack "anstyle-query" inps.anstyle-query-src "1.0.2" "anstyle-query";
                    anstyle-wincon-unpacked = rustUnpack "anstyle-wincon" inps.anstyle-wincon-src "3.0.2" "anstyle-wincon";
                    anyhow-unpacked = rustUnpack "anyhow" inps.anyhow-src "1.0.43" "anyhow";
                    autocfg-unpacked = rustUnpack "autocfg" inps.autocfg-src "1.0.1" "autocfg";
                    bitflags-unpacked = rustUnpack "bitflags" inps.bitflags-src "1.2.1" "bitflags";
                    block-buffer-unpacked = rustUnpack "block-buffer" inps.block-buffer-src "0.9.0" "block-buffer";
                    build-bom = rustBld "build-bom" self "0.2.0" "build-bom" [
                        "aho-corasick"
                        "anstream"
                        "anstyle"
                        "anstyle-parse"
                        "anstyle-query"
                        "anstyle-wincon"
                        "anyhow"
                        "autocfg"
                        "bitflags"
                        "block-buffer"
                        "byteorder"
                        "cc"
                        "cfg-if-0_1_10"
                        "cfg-if-1_0_0"
                        "chainsop"
                        "clap"
                        "clap_builder"
                        "clap_derive"
                        "clap_lex"
                        "cloudabi"
                        "colorchoice"
                        "cpufeatures"
                        "digest"
                        "either"
                        "env_filter"
                        "env_logger"
                        "filesprep_derive"
                        "filetime"
                        "fs_extra"
                        "generic-array"
                        "getrandom"
                        "glob"
                        "heck"
                        "hex"
                        "humantime"
                        "itoa"
                        "lazy_static"
                        "libc"
                        "lock_api"
                        "log"
                        "memchr"
                        "memoffset"
                        "nix"
                        "num-traits"
                        "opaque-debug"
                        "os_pipe"
                        "parking_lot"
                        "parking_lot_core"
                        "pete"
                        "ppv-lite86"
                        "proc-macro2"
                        "quote"
                        "rand"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "redox_syscall-0_1_57"
                        "redox_syscall-0_2_10"
                        "regex"
                        "regex-syntax"
                        "remove_dir_all"
                        "rmp"
                        "rmp-serde"
                        "ryu"
                        "scopeguard"
                        "serde"
                        "serde_derive"
                        "serde_json"
                        "serial_test"
                        "serial_test_derive"
                        "sha2"
                        "slab_tree"
                        "smallvec"
                        "snowflake"
                        "strsim"
                        "syn-1_0_74"
                        "syn-2_0_52"
                        "tar"
                        "tempfile"
                        "test-log"
                        "test-log-macros"
                        "thiserror"
                        "thiserror-impl"
                        "typenum"
                        "unicode-ident"
                        "unicode-xid"
                        "utf8parse"
                        "version_check"
                        "wasi"
                        "which"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                        "windows-sys"
                        "windows-targets"
                        "windows_aarch64_gnullvm"
                        "windows_aarch64_msvc"
                        "windows_i686_gnu"
                        "windows_i686_msvc"
                        "windows_x86_64_gnu"
                        "windows_x86_64_gnullvm"
                        "windows_x86_64_msvc"
                        "xattr"
                        "xshell"
                        "xshell-macros"
                      ];
                    build-bom-unpacked = rustUnpack "build-bom" inps.build-bom-src "0.2.0" "build-bom";
                    byteorder-unpacked = rustUnpack "byteorder" inps.byteorder-src "1.4.3" "byteorder";
                    cc-unpacked = rustUnpack "cc" inps.cc-src "1.0.69" "cc";
                    cfg-if-0_1_10-unpacked = rustUnpack "cfg-if-0_1_10" inps.cfg-if-0_1_10-src "0.1.10" "cfg-if";
                    cfg-if-1_0_0-unpacked = rustUnpack "cfg-if-1_0_0" inps.cfg-if-1_0_0-src "1.0.0" "cfg-if";
                    chainsop-unpacked = rustUnpack "chainsop" inps.chainsop-src "0.1.0" "chainsop";
                    clap-unpacked = rustUnpack "clap" inps.clap-src "4.5.2" "clap";
                    clap_builder-unpacked = rustUnpack "clap_builder" inps.clap_builder-src "4.5.2" "clap_builder";
                    clap_derive-unpacked = rustUnpack "clap_derive" inps.clap_derive-src "4.5.0" "clap_derive";
                    clap_lex-unpacked = rustUnpack "clap_lex" inps.clap_lex-src "0.7.0" "clap_lex";
                    cloudabi-unpacked = rustUnpack "cloudabi" inps.cloudabi-src "0.0.3" "cloudabi";
                    colorchoice-unpacked = rustUnpack "colorchoice" inps.colorchoice-src "1.0.0" "colorchoice";
                    cpufeatures-unpacked = rustUnpack "cpufeatures" inps.cpufeatures-src "0.1.5" "cpufeatures";
                    digest-unpacked = rustUnpack "digest" inps.digest-src "0.9.0" "digest";
                    either-unpacked = rustUnpack "either" inps.either-src "1.6.1" "either";
                    env_filter-unpacked = rustUnpack "env_filter" inps.env_filter-src "0.1.0" "env_filter";
                    env_logger-unpacked = rustUnpack "env_logger" inps.env_logger-src "0.11.2" "env_logger";
                    filesprep_derive-unpacked = rustUnpack "filesprep_derive" inps.filesprep_derive-src "0.1.0" "filesprep_derive";
                    filetime-unpacked = rustUnpack "filetime" inps.filetime-src "0.2.15" "filetime";
                    fs_extra-unpacked = rustUnpack "fs_extra" inps.fs_extra-src "1.2.0" "fs_extra";
                    generic-array-unpacked = rustUnpack "generic-array" inps.generic-array-src "0.14.4" "generic-array";
                    getrandom-unpacked = rustUnpack "getrandom" inps.getrandom-src "0.2.3" "getrandom";
                    glob-unpacked = rustUnpack "glob" inps.glob-src "0.3.0" "glob";
                    heck-unpacked = rustUnpack "heck" inps.heck-src "0.4.1" "heck";
                    hex-unpacked = rustUnpack "hex" inps.hex-src "0.4.3" "hex";
                    humantime-unpacked = rustUnpack "humantime" inps.humantime-src "2.1.0" "humantime";
                    itoa-unpacked = rustUnpack "itoa" inps.itoa-src "0.4.7" "itoa";
                    lazy_static-unpacked = rustUnpack "lazy_static" inps.lazy_static-src "1.4.0" "lazy_static";
                    libc-unpacked = rustUnpack "libc" inps.libc-src "0.2.99" "libc";
                    lock_api-unpacked = rustUnpack "lock_api" inps.lock_api-src "0.3.4" "lock_api";
                    log-unpacked = rustUnpack "log" inps.log-src "0.4.20" "log";
                    memchr-unpacked = rustUnpack "memchr" inps.memchr-src "2.4.0" "memchr";
                    memoffset-unpacked = rustUnpack "memoffset" inps.memoffset-src "0.6.4" "memoffset";
                    nix-unpacked = rustUnpack "nix" inps.nix-src "0.22.1" "nix";
                    num-traits-unpacked = rustUnpack "num-traits" inps.num-traits-src "0.2.14" "num-traits";
                    opaque-debug-unpacked = rustUnpack "opaque-debug" inps.opaque-debug-src "0.3.0" "opaque-debug";
                    os_pipe-unpacked = rustUnpack "os_pipe" inps.os_pipe-src "0.9.2" "os_pipe";
                    parking_lot-unpacked = rustUnpack "parking_lot" inps.parking_lot-src "0.10.2" "parking_lot";
                    parking_lot_core-unpacked = rustUnpack "parking_lot_core" inps.parking_lot_core-src "0.7.3" "parking_lot_core";
                    pete-unpacked = rustUnpack "pete" inps.pete-src "0.7.0" "pete";
                    ppv-lite86-unpacked = rustUnpack "ppv-lite86" inps.ppv-lite86-src "0.2.10" "ppv-lite86";
                    proc-macro2-unpacked = rustUnpack "proc-macro2" inps.proc-macro2-src "1.0.78" "proc-macro2";
                    quote-unpacked = rustUnpack "quote" inps.quote-src "1.0.35" "quote";
                    rand-unpacked = rustUnpack "rand" inps.rand-src "0.8.4" "rand";
                    rand_chacha-unpacked = rustUnpack "rand_chacha" inps.rand_chacha-src "0.3.1" "rand_chacha";
                    rand_core-unpacked = rustUnpack "rand_core" inps.rand_core-src "0.6.3" "rand_core";
                    rand_hc-unpacked = rustUnpack "rand_hc" inps.rand_hc-src "0.3.1" "rand_hc";
                    redox_syscall-0_1_57-unpacked = rustUnpack "redox_syscall-0_1_57" inps.redox_syscall-0_1_57-src "0.1.57" "redox_syscall";
                    redox_syscall-0_2_10-unpacked = rustUnpack "redox_syscall-0_2_10" inps.redox_syscall-0_2_10-src "0.2.10" "redox_syscall";
                    regex-unpacked = rustUnpack "regex" inps.regex-src "1.5.4" "regex";
                    regex-syntax-unpacked = rustUnpack "regex-syntax" inps.regex-syntax-src "0.6.25" "regex-syntax";
                    remove_dir_all-unpacked = rustUnpack "remove_dir_all" inps.remove_dir_all-src "0.5.3" "remove_dir_all";
                    rmp-unpacked = rustUnpack "rmp" inps.rmp-src "0.8.10" "rmp";
                    rmp-serde-unpacked = rustUnpack "rmp-serde" inps.rmp-serde-src "0.14.4" "rmp-serde";
                    ryu-unpacked = rustUnpack "ryu" inps.ryu-src "1.0.5" "ryu";
                    scopeguard-unpacked = rustUnpack "scopeguard" inps.scopeguard-src "1.2.0" "scopeguard";
                    serde-unpacked = rustUnpack "serde" inps.serde-src "1.0.197" "serde";
                    serde_derive-unpacked = rustUnpack "serde_derive" inps.serde_derive-src "1.0.197" "serde_derive";
                    serde_json-unpacked = rustUnpack "serde_json" inps.serde_json-src "1.0.66" "serde_json";
                    serial_test-unpacked = rustUnpack "serial_test" inps.serial_test-src "0.4.0" "serial_test";
                    serial_test_derive-unpacked = rustUnpack "serial_test_derive" inps.serial_test_derive-src "0.4.0" "serial_test_derive";
                    sha2-unpacked = rustUnpack "sha2" inps.sha2-src "0.9.5" "sha2";
                    slab_tree-unpacked = rustUnpack "slab_tree" inps.slab_tree-src "0.3.2" "slab_tree";
                    smallvec-unpacked = rustUnpack "smallvec" inps.smallvec-src "1.13.1" "smallvec";
                    snowflake-unpacked = rustUnpack "snowflake" inps.snowflake-src "1.3.0" "snowflake";
                    strsim-unpacked = rustUnpack "strsim" inps.strsim-src "0.11.0" "strsim";
                    syn-1_0_74-unpacked = rustUnpack "syn-1_0_74" inps.syn-1_0_74-src "1.0.74" "syn";
                    syn-2_0_52-unpacked = rustUnpack "syn-2_0_52" inps.syn-2_0_52-src "2.0.52" "syn";
                    tar-unpacked = rustUnpack "tar" inps.tar-src "0.4.37" "tar";
                    tempfile-unpacked = rustUnpack "tempfile" inps.tempfile-src "3.2.0" "tempfile";
                    test-log-unpacked = rustUnpack "test-log" inps.test-log-src "0.2.15" "test-log";
                    test-log-macros-unpacked = rustUnpack "test-log-macros" inps.test-log-macros-src "0.2.15" "test-log-macros";
                    thiserror-unpacked = rustUnpack "thiserror" inps.thiserror-src "1.0.39" "thiserror";
                    thiserror-impl-unpacked = rustUnpack "thiserror-impl" inps.thiserror-impl-src "1.0.39" "thiserror-impl";
                    typenum-unpacked = rustUnpack "typenum" inps.typenum-src "1.13.0" "typenum";
                    unicode-ident-unpacked = rustUnpack "unicode-ident" inps.unicode-ident-src "1.0.12" "unicode-ident";
                    unicode-xid-unpacked = rustUnpack "unicode-xid" inps.unicode-xid-src "0.2.2" "unicode-xid";
                    utf8parse-unpacked = rustUnpack "utf8parse" inps.utf8parse-src "0.2.1" "utf8parse";
                    version_check-unpacked = rustUnpack "version_check" inps.version_check-src "0.9.3" "version_check";
                    wasi-unpacked = rustUnpack "wasi" inps.wasi-src "0.10.2+wasi-snapshot-preview1" "wasi";
                    which-unpacked = rustUnpack "which" inps.which-src "4.2.2" "which";
                    winapi-unpacked = rustUnpack "winapi" inps.winapi-src "0.3.9" "winapi";
                    winapi-i686-pc-windows-gnu-unpacked = rustUnpack "winapi-i686-pc-windows-gnu" inps.winapi-i686-pc-windows-gnu-src "0.4.0" "winapi-i686-pc-windows-gnu";
                    winapi-x86_64-pc-windows-gnu-unpacked = rustUnpack "winapi-x86_64-pc-windows-gnu" inps.winapi-x86_64-pc-windows-gnu-src "0.4.0" "winapi-x86_64-pc-windows-gnu";
                    windows-sys-unpacked = rustUnpack "windows-sys" inps.windows-sys-src "0.52.0" "windows-sys";
                    windows-targets-unpacked = rustUnpack "windows-targets" inps.windows-targets-src "0.52.3" "windows-targets";
                    windows_aarch64_gnullvm-unpacked = rustUnpack "windows_aarch64_gnullvm" inps.windows_aarch64_gnullvm-src "0.52.3" "windows_aarch64_gnullvm";
                    windows_aarch64_msvc-unpacked = rustUnpack "windows_aarch64_msvc" inps.windows_aarch64_msvc-src "0.52.3" "windows_aarch64_msvc";
                    windows_i686_gnu-unpacked = rustUnpack "windows_i686_gnu" inps.windows_i686_gnu-src "0.52.3" "windows_i686_gnu";
                    windows_i686_msvc-unpacked = rustUnpack "windows_i686_msvc" inps.windows_i686_msvc-src "0.52.3" "windows_i686_msvc";
                    windows_x86_64_gnu-unpacked = rustUnpack "windows_x86_64_gnu" inps.windows_x86_64_gnu-src "0.52.3" "windows_x86_64_gnu";
                    windows_x86_64_gnullvm-unpacked = rustUnpack "windows_x86_64_gnullvm" inps.windows_x86_64_gnullvm-src "0.52.3" "windows_x86_64_gnullvm";
                    windows_x86_64_msvc-unpacked = rustUnpack "windows_x86_64_msvc" inps.windows_x86_64_msvc-src "0.52.3" "windows_x86_64_msvc";
                    xattr-unpacked = rustUnpack "xattr" inps.xattr-src "0.2.2" "xattr";
                    xshell-unpacked = rustUnpack "xshell" inps.xshell-src "0.1.14" "xshell";
                    xshell-macros-unpacked = rustUnpack "xshell-macros" inps.xshell-macros-src "0.1.14" "xshell-macros";
                  });
        devShells = levers.eachSystem (s:
              {
                default = self.packages.${s}.build-bom.overrideAttrs (o:
                      {
                        nativeBuildInputs = o.nativeBuildInputs ++ (with import nixpkgs { system=s; }; [
                              pkgs.rustc
                              pkgs.cargo
                              pkgs.clang
                              pkgs.llvm
                            ]);
                      });
              });
      };
}
